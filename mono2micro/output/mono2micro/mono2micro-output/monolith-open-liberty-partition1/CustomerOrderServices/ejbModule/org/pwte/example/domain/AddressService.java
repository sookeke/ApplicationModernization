package org.pwte.example.domain;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import java.io.Serializable;

/**
 * Service class for Address - Generated by Cardinal
 */

@Path("/AddressService")
public class AddressService {
    private static final Logger klu__logger = CardinalLogger.getLogger(AddressService.class);

    // default constructor service
    @POST
    @Path("/Address_default_ctor")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response Address_default_ctor() {
        Address instAddress = new Address();
        String refid = ClusterObjectManager.putObject(instAddress);
        instAddress.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        klu__logger.info("[AddressService] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        klu__logger.info("[Address] getHealth() called");
        return "AddressService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        klu__logger.info("[AddressService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        klu__logger.info("[Address] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/getAddressLine1")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAddressLine1(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            response = instAddress.getAddressLine1();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getAddressLine1() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        klu__logger.info("[Address] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setAddressLine1")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setAddressLine1(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("addressLine1") String addressLine1,
        @Context HttpServletResponse servletResponse
    ) {

        String addressLine1_fpar = addressLine1;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instAddress.setAddressLine1(addressLine1_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setAddressLine1() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getAddressLine2")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAddressLine2(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            response = instAddress.getAddressLine2();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getAddressLine2() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        klu__logger.info("[Address] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setAddressLine2")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setAddressLine2(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("addressLine2") String addressLine2,
        @Context HttpServletResponse servletResponse
    ) {

        String addressLine2_fpar = addressLine2;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instAddress.setAddressLine2(addressLine2_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setAddressLine2() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getCity")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getCity(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            response = instAddress.getCity();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getCity() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        klu__logger.info("[Address] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setCity")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setCity(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("city") String city,
        @Context HttpServletResponse servletResponse
    ) {

        String city_fpar = city;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instAddress.setCity(city_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setCity() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getState")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getState(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            response = instAddress.getState();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getState() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        klu__logger.info("[Address] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setState")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setState(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("state") String state,
        @Context HttpServletResponse servletResponse
    ) {

        String state_fpar = state;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instAddress.setState(state_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setState() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getCountry")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getCountry(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            response = instAddress.getCountry();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getCountry() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        klu__logger.info("[Address] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setCountry")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setCountry(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("country") String country,
        @Context HttpServletResponse servletResponse
    ) {

        String country_fpar = country;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instAddress.setCountry(country_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setCountry() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getZip")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getZip(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            response = instAddress.getZip();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getZip() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        klu__logger.info("[Address] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setZip")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setZip(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("zip") String zip,
        @Context HttpServletResponse servletResponse
    ) {

        String zip_fpar = zip;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Address instAddress = (Address)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instAddress.setZip(zip_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setZip() of Address raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

}