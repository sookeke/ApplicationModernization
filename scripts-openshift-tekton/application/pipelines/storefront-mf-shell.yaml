apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: storefront-mf-shell
spec:
  description: |
    storefront-mf-shell
  params:
  - name: repo-url
    type: string
    description: The git repository URL to clone from.
  - name: project-name
    type: string
    description: The target project.
  workspaces:
  - name: shared-data
    description: |
      shared workspace
  tasks:
  - name: git-clone
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: url
      value: $(params.repo-url)
    - name: revision
      value: master
  - name: wait-for-backend
    taskRef:
      name: wait-for-backend
    workspaces:
    - name: source
      workspace: shared-data
    runAfter: ["git-clone"] 
    params:
    - name: project-name
      value: $(params.project-name)
  - name: wait-for-frontends
    taskRef:
      name: wait-for-frontends
    workspaces:
    - name: source
      workspace: shared-data
    runAfter: ["wait-for-backend"] 
    params:
    - name: project-name
      value: $(params.project-name)
  - name: prep-storefront-mf-shell
    taskRef:
      name: prep-storefront-mf-shell
    workspaces:
    - name: source
      workspace: shared-data
    runAfter: ["wait-for-frontends"] 
    params:
    - name: project-name
      value: $(params.project-name)
  - name: buildah
    taskRef:
      name: buildah
    workspaces:
    - name: source
      workspace: shared-data
    params:
    - name: IMAGE
      value: image-registry.openshift-image-registry.svc:5000/$(params.project-name)/build-storefront-mf-shell
    - name: CONTEXT
      value: $(workspaces.source.path)/frontend-single-spa/shell
    - name: TLSVERIFY
      value: "false"
    runAfter: ["prep-storefront-mf-shell"] 
  - name: deploy-storefront-mf-shell
    taskRef:
      name: deploy-storefront-mf-shell
    workspaces:
    - name: source
      workspace: shared-data
    runAfter: ["buildah"] 
    params:
    - name: project-name
      value: $(params.project-name)