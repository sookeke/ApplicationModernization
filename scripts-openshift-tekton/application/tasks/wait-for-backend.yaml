apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: wait-for-backend
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/pipelines.minVersion: "0.21.0"
    tekton.dev/displayName: "wait-for-backend"
spec:
  description: >-
    wait-for-backend
  workspaces:
    - name: source
      description: shared workspace 
  params:
  - name: project-name
    description: project-name 
  steps:
    - name: wait-for-backend
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli
      script: |
        #!/bin/bash
        
        PROJECT_NAME=$(params.project-name)
        MAX_ITERATIONS=120
        ITERATION=0
        WAIT_SECONDS=10
        
        oc project $PROJECT_NAME > /dev/null 2>&1
        if [ $? != 0 ]; then 
          oc new-project $PROJECT_NAME
        fi

        while true
        do
          ((ITERATION++))
          echo Waiting 10 seconds ...
          sleep $WAIT_SECONDS
          echo Checking backend status ...
          ROUTE_MONOLITH=$(oc get route monolith-open-liberty-cloud-native --template='{{ .spec.host }}')
          ROUTE_CATALOG=$(oc get route service-catalog-quarkus-reactive --template='{{ .spec.host }}')

          if [ -z "$ROUTE_CATALOG" ]
          then
            echo service-catalog-quarkus-reactive is NOT available
          else
            if [ -z "$ROUTE_MONOLITH" ]
            then
              echo monolith-open-liberty-cloud-native is NOT available
            else
              echo service-catalog-quarkus-reactive and monolith-open-liberty-cloud-native are available
              break
            fi
          fi  

          if [ "$ITERATION" -ge "$MAX_ITERATIONS" ]; 
          then
            echo service-catalog-quarkus-reactive and/or monolith-open-liberty-cloud-native are NOT available
            echo Timeout occured
            exit 1
          fi      
        done